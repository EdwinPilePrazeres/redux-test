{"version":3,"sources":["components/CounterControl/CounterControl.module.css","components/CounterOutput/CounterOutput.module.css","components/CounterControl/CounterControl.js","components/CounterOutput/CounterOutput.js","store/actions.js","containers/Counter/Counter.js","App.js","registerServiceWorker.js","store/reducers/counter.js","store/reducers/result.js","index.js"],"names":["module","exports","counterControl","props","className","classes","CounterControl","onClick","clicked","label","counterOutput","CounterOutput","value","INCREMENT","DECREMENT","ADD","SUBTRACT","STORE_RESULT","DELETE_RESULT","Counter","this","ctr","onIncrementCounter","onDecrementCounter","onAddCounter","onSubtractCounter","onStoreResult","storedResults","map","strResult","onDeleteResult","id","Component","connect","state","counter","res","results","dispatch","type","actionTypes","val","result","resultElId","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","reducer","action","newState","Object","assign","concat","Date","updatedArray","filter","rootReducer","combineReducers","counterReducer","resultReducer","store","createStore","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b11e82c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CounterControl\":\"CounterControl_CounterControl__3Bue0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CounterOutput\":\"CounterOutput_CounterOutput__3KYjz\"};","import React from 'react';\r\n\r\nimport classes from './CounterControl.module.css';\r\n\r\nconst counterControl = (props) => (\r\n    <div className={classes.CounterControl} onClick={props.clicked}>\r\n        {props.label}\r\n    </div>\r\n);\r\n\r\nexport default counterControl;","import React from 'react';\r\n\r\nimport classes from './CounterOutput.module.css';\r\n\r\nconst counterOutput = (props) => (\r\n    <div className={classes.CounterOutput}>\r\n        Current Counter: {props.value}\r\n    </div>\r\n);\r\n\r\nexport default counterOutput;","export const INCREMENT = 'INCREMENT';\r\nexport const DECREMENT = 'DECREMENT';\r\nexport const ADD = 'ADD';\r\nexport const SUBTRACT = 'SUBTRACT';\r\nexport const STORE_RESULT = 'STORE_RESULT';\r\nexport const DELETE_RESULT = 'DELETE_RESULT';\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport CounterControl from '../../components/CounterControl/CounterControl';\r\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../store/actions'\r\n\r\nclass Counter extends Component {\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <CounterOutput value={this.props.ctr} />\r\n                <CounterControl label=\"Increment\" clicked={this.props.onIncrementCounter} />\r\n                <CounterControl label=\"Decrement\" clicked={this.props.onDecrementCounter}  />\r\n                <CounterControl label=\"Add 30\" clicked={this.props.onAddCounter}  />\r\n                <CounterControl label=\"Subtract 15\" clicked={this.props.onSubtractCounter}  />\r\n                <hr />\r\n                <button onClick={() => this.props.onStoreResult(this.props.ctr)} >Store Result</button>\r\n                <ul>\r\n                    {this.props.storedResults.map(strResult => (\r\n                        <li \r\n                            key={strResult.id}\r\n                            onClick={() => this.props.onDeleteResult(strResult.id)}>{strResult.value}\r\n                        </li>\r\n\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ctr: state.ctr.counter,\r\n        storedResults: state.res.results\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onIncrementCounter: () => dispatch({type: actionTypes.INCREMENT}),\r\n        onDecrementCounter: () => dispatch({type: actionTypes.DECREMENT}),\r\n        onAddCounter: () => dispatch({type: actionTypes.ADD, val: 30}),\r\n        onSubtractCounter: () => dispatch({type: actionTypes.SUBTRACT, val: 15}),\r\n        onStoreResult: (result) => dispatch({type: actionTypes.STORE_RESULT, result: result}),\r\n        onDeleteResult: (id) => dispatch({type: actionTypes.DELETE_RESULT, resultElId: id}),\r\n\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Counter);","import React, { Component } from 'react';\nimport Counter from './containers/Counter/Counter';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions';\r\n\r\nconst initialState = {\r\n    counter: 0\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch ( action.type ) {\r\n        case actionTypes.INCREMENT:\r\n            const newState = Object.assign({}, state);\r\n            newState.counter = state.counter + 1;\r\n            return newState;\r\n        case actionTypes.DECREMENT:\r\n                return {\r\n                    ...state,\r\n                    counter: state.counter - 1\r\n                }\r\n        case actionTypes.ADD:\r\n            return {\r\n                ...state,\r\n                counter: state.counter + action.val\r\n            }\r\n        case actionTypes.SUBTRACT:\r\n            return {\r\n                ...state,\r\n                counter: state.counter - action.val\r\n            }\r\n        \r\n    }\r\n   \r\n    return state;\r\n\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions';\r\n\r\nconst initialState = {\r\n    \r\n    results: [],\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch ( action.type ) {\r\n        \r\n        case actionTypes.STORE_RESULT:\r\n            return {\r\n                ...state,\r\n                results: state.results.concat({id: new Date(), value: action.result})\r\n            }\r\n        case actionTypes.DELETE_RESULT:\r\n            // const id = 2;\r\n            // const newArray = [...state.results];\r\n            // newArray.splice(id, 1);\r\n            const updatedArray = state.results.filter(result  => result.id !== action.resultElId);\r\n            return {\r\n                ...state,\r\n                results: updatedArray\r\n            }\r\n    }\r\n   \r\n    return state;\r\n\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport counterReducer from './store/reducers/counter';\nimport resultReducer from './store/reducers/result';\nimport { Provider } from 'react-redux';\n\nconst rootReducer = combineReducers ({\n    ctr: counterReducer,\n    res: resultReducer\n});\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}